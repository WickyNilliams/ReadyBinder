currently there are two common approaches to managing code for you document ready events for the page:
the first approach is simply to have a single document ready handler which is the same on every page of your site. as you add more functionality to different parts of your website, your document ready handler will inevitably become less focused, more bloated and will start to include code which isn't relevant to every page. so this approach can be inefficient and a maintenance problem.
the second, more complex, approach involves generating highly-relevant document ready handlers on the server on a page-by-page basis. whilst this approach this approach solves the maintenance issue, and keep handlers focused and efficient, it violates separation of concerns as it forces your back-end application to be aware of, and responsible for, purely front-end concerns. also, you may forgo the benefits of client-side caching by including your document ready handlers inline in the page.

with readyBinder you can have one document ready handler for your entire site. it will not need to be changed unless you wish to reconfigure how code is bound.

with readyBinder, everything is wired up declaratively. this is achieved by specifying, on any attribute on any DOM element, which pieces of encapsulated logic you wish to to to execute on the current page. this means your ready handler will become efficient, only executing code that is needed for the current page; maintenance is cut down by keeping your ready handler lean; a separation of concerns is achieved, because the server-side app no longer needs to be responsible for document ready handlers; and finally you can avoid inline document ready handlers, keeping your markup clean and allowing for the use of client-side caching.